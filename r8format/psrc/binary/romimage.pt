from    io  import BytesIO
from    urllib.error  import URLError
import  pytest

from    binary.romimage  import *

pm = pytest.mark.parametrize

def tdpath(filename):
    return Path(__file__).parent.joinpath('testdata', filename)

def test_set_image():
    ri = RomImage('set_image', cachedir=None)

    ...;                            assert b''              == ri.image
    ri.set_image(0, b'AB');         assert b'AB'            == ri.image
    ri.set_image(4, b'CD');         assert b'AB\x00\x00CD'  == ri.image
    ri.set_image(2, b'ef');         assert b'ABefCD'  == ri.image

@pm('s', [ 'http://usr@pw:ex.com/', 'http:', 'a2+-.:', ])
def test_SCHEME_true(s):  assert RomImage.SCHEME.match(s)

@pm('s', [
    'a', '', '2:',
    #   `x:` where `x` is a letter is technically legal per RFC 3896, but
    #   it also matches some Windows paths. Since we allow giving either
    #   a URL or a file path on the command line, we always interpret
    #   `x:` as a path so that Windows users can reference other drives.
    'C:',
])
def test_SCHEME_false(s):  assert not RomImage.SCHEME.match(s)

@pm('loadspec, startaddr, source', [
    ('@1F2E:foo/bar',               0x1F2E, 'foo/bar'),
    ('@1F2E/foo/bar',                    0, '@1F2E/foo/bar'),
    ('foo/bar',                          0, 'foo/bar'),
    ('@12:file://foo/bar',          0x0012, 'file://foo/bar'),
    ('https://bin.com/foo/bar.bin',      0, 'https://bin.com/foo/bar.bin'),
    ('--',                              -1, None),      # "clear RomImage"
])
def test_parse_loadspec(loadspec, startaddr, source):
    assert (startaddr, source) == RomImage.parse_loadspec(loadspec)

@pm('url, expected', [
    ['file://foo/bar/baz.bin',          'file/foo/bar/baz.bin'],
    ['https://example.com/bar/woz.bin', 'https/example.com/bar/woz.bin'],
])
def test_cache_file(url, expected):
    path = RomImage(None, cachedir='/foo/bar').cache_file(url, mkdir=False)
    assert '/foo/bar/' + expected == str(path)

def test_write():
    ri = RomImage('t_write', cachedir=None);
    with BytesIO() as f:
        ri.writefd(f);  assert b'' == f.getvalue()

    ri.image = b'\x00\x01\x02'
    with BytesIO() as f:
        ri.writefd(f);  assert b'\x00\x01\x02' == f.getvalue()

def test_load_clear():
    ri = RomImage('t_load_clear', cachedir=None)
    ri.set_image(0, b'AB'); assert 0 < len(ri.image)
    ri.load(-1, None);      assert 0 == len(ri.image)

def test_load_file():
    ri = RomImage('t_load_file', cachedir=None)
    assert b'' == ri.image
    ri.load(0, tdpath('romimage.bin'))    # tests readfile()
    assert b'RomImage Test Data\n' == ri.image

def test_load_url():
    ri = RomImage('t_load_url', cachedir=None)
    assert b'' == ri.image
    url  = 'file://' + str(tdpath('romimage.bin'))
    ri.startaddr = 2
    ri.load(2, url)    # tests download()
    assert b'\x00\x00RomImage Test Data\n' == ri.image

def test_load_url_bad():
    ri = RomImage('t_load_url', cachedir=None)
    with pytest.raises(URLError):
        ri.load(0, 'file:///this/is/a/bad/path')

@pm('romname, expected, patchname', [
    ('N80.BIN',     True,  'N80.BIN'),
    ('N80.BIN',     False, 'N81.BIN'),
    ('N80.BIN',     True,  'n80.bin'),
    ('N80.BIN',     True,  'n80'),
    ('foo',         False, 'foo.bin'),
])
def test_matchname(expected, romname, patchname):
    assert expected == RomImage(romname, cachedir=None).matchname(patchname)

def test_matchpatchspec():
    ri = RomImage('', cachedir=None)
    assert not ri.matchpatchspec('foo=bar')
    assert not ri.matchpatchspec('foo')

def test_patches():
    ri = RomImage('ABC.def', cachedir=None)
    patchspecs = ['foo=bar', 'baz=quux', 'justbad', ]
    ri.patches(patchspecs)
    assert 3 == len(patchspecs)

    patchspecs[1] = 'abc=/dev/null'
    ri.patches(patchspecs)
    assert 2 == len(patchspecs)

def test_patches_multi():
    ri = RomImage('ABC.def', cachedir=None)
    patchspecs = ['foo=bar', 'abc=/dev/null', 'baz=quux', 'abc=/dev/null']
    ri.patches(patchspecs)
    assert ['foo=bar', 'baz=quux'] == patchspecs
