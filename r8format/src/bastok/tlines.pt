from    bastok.tlines  import TLines, le, unle, BASFile
from    io  import BytesIO
import  pytest, struct

def test_le():
    assert b'\x00\x00' == le(0)
    assert b'\x34\x12' == le(0x1234)
    assert b'\xFF\xFF' == le(65535)
    with pytest.raises(struct.error): le(65536)

def test_unle():
    assert 0x1234 == unle(b'\x34\x12')
    assert 0x1234 == unle(b'\x34\x12\x56')

####################################################################

def test_setline_text():
    tl = TLines(txttab=0x0801)
    assert None is tl.orig_text
    assert 0x0801 == tl.txttab

    tl.setline(20, b'this is a longer line')
    tl.setline(10, b'\x00\x01\xFE\xFF')

    #   If we ever need the first address after the text, here's the API.
    #assert tl.txttab + len(tl.text()) == tl.vartab()

    #   Here's an example of how you can get a dump from a test, for debugging.
    #with open('z', 'wb') as f: f.write(tl.text())

    expected = b''.join([
        le(0x80A), le(10), b'\x00\x01\xFE\xFF',      b'\x00',
        le(0x824), le(20), b'this is a longer line', b'\x00',
        le(0),
        ])
    assert expected == tl.text()

    bio = BytesIO()
    tl.write_to(bio)
    assert b'\xFF' + expected == bio.getvalue()

    expected_new_txttab = bytearray(expected)
    for i in (0x01, 0x0A):    # update offsets
        assert expected_new_txttab[i] == 0x08
        expected_new_txttab[i] = 0x09
    tl.txttab = 0x901
    assert bytes(expected_new_txttab) == tl.text()

def test_setline_bad_lineno():
    tl = TLines(txttab=0x400)
    with pytest.raises(ValueError): tl.setline(-1, b'')
    with pytest.raises(ValueError): tl.setline(tl.maxlin + 1, b'')
    tl.setline(tl.maxlin, b'')

@pytest.mark.xfail(strict=True, reason='Implementation incomplete')
def test_tlines_no_txttab():
    tl = TLines()

####################################################################

TEST_TXTTAB = 0x7701
TEST_TEXT_1 = b''.join([
    b'\x11\x77', b'\x0A\x00',       # next line pointer, line 10
    b'\x8F Tokenized\x00',          # REM Tokenized
    b'\x1B\x77', b'\x14\x00',       # next line pointer, line 10
    b'\x91 "\x00"\x00'              # PRINT "<NUL>"
    b'\x00\x00',                    # terminator
])
TEST_TEXT_2 = b''.join([
    b'\x07\x77', b'\x01\x00', b'\xFF\x00',  # next line pointer, line 1, token
    b'\x0D\x77', b'\x02\x00', b'\xFE\x00',  # next line pointer, line 2, token
    b'\x00\x00'                             # end of program
])

def test_parsetext_with_txttab():
    tl = TLines(TEST_TEXT_1, txttab=TEST_TXTTAB)
    assert TEST_TEXT_1 == tl.orig_text
    assert (0x7701, TEST_TEXT_1) == (tl.txttab, tl.text())
    expected = {
        10: b'\x8F Tokenized',
        20: b'\x91 "\x00"',
        }
    assert expected == tl.linemap

def test_orig_text():
    tl = TLines(txttab=TEST_TXTTAB)
    assert (None, tl.linenos()) == (tl.orig_text, ())

    tl.parsetext(TEST_TEXT_1)
    assert (TEST_TEXT_1, tl.linenos()) == (tl.orig_text, (10,20))

    #   Parsing more text preserves orig_text,
    tl.parsetext(TEST_TEXT_2)
    assert (TEST_TEXT_1, tl.linenos()) == (tl.orig_text, (1,2,10,20))

    #   Clear then parse resets orig_text
    tl.clearlines()
    tl.parsetext(TEST_TEXT_2)
    assert (TEST_TEXT_2, tl.linenos()) == (tl.orig_text, (1,2))

def test_parsetext_badterm():
    badprog = b''.join([ b'\x05\x01', b'\x02\x01', b'_\x00\x00', ])
    with pytest.raises(ValueError) as ex:
        TLines(badprog, txttab=0x100)
    assert ex.match(r'line 258 ')
    assert ex.match(r'addr \$0100:')
    assert ex.match(r'byte \$5F ')    # '_'
    assert ex.match(r'at \$0104 ')
    assert ex.match(r'offset \$0004')

@pytest.mark.xfail(strict=True, reason='Implementation incomplete')
def test_parsetext_no_txttab():
    assert 0

####################################################################
#   BASFile

TXTTAB = b''.join([
    b'\x00\x00\x11\x11',    # next address and line number
    b'\x8F\x00',            # REM statement
])

def test_basfile_msx():
    bf = BASFile(b'\xFF' + TXTTAB, 'MSX')
    assert (b'\xFF',     TXTTAB     ) \
        == (bf.header(), bf.txttab())

    with pytest.raises(BASFile.BadHeader):
        bf = BASFile(TXTTAB, 'MSX')

def test_basfile_addr():
    bf = BASFile(TXTTAB, 'TXTTAB')
    assert b'' == bf.header()
    assert None is bf.addr()    #   can't determine addr with only one line

    text = b''.join([
        b'\x12\x80', b'\x11\x00',
        b'0123456789\x00',
        b'\x00\x00', b'\x22\x00',
        b'0123456789\x00',
    ])
    expected = 0x8012 - (2 + 2 + 10 + 1)  # next - (addr + lineno + text + term)
    bf = BASFile(text, 'TXTTAB')
    assert expected == bf.addr(), "expected " + hex(expected)

def test_basfile_read():
    bf = BASFile(b'\xFF' + TXTTAB, 'MSX')
    assert   b'\x00\x00\x11\x11' == bf.read(4)
    assert           b'\x8F\x00' == bf.read()
